/*Copyright (c) 2015-2016 WaveMaker.com All Rights Reserved.
 This software is the confidential and proprietary information of WaveMaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with WaveMaker.com*/

package com.wavemaker.sampleapps.wavekart.eshopping.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.wavemaker.sampleapps.wavekart.eshopping.service.EshoppingQueryExecutorService;
import com.wavemaker.sampleapps.wavekart.eshopping.models.query.*;

@RestController(value = "Eshopping.QueryExecutionController")
@RequestMapping("/eshopping/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private EshoppingQueryExecutorService queryService;

    @RequestMapping(value = "/queries/TotalItemsPrice_CartProd", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "total items in cart of logged in user")
    public Page<TotalItemsPriceCartProdResponse> executeTotalItemsPrice_CartProd(@RequestParam(value = "cartId", required = false) Integer cartId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: TotalItemsPrice_CartProd");
        Page<TotalItemsPriceCartProdResponse> _result = queryService.executeTotalItemsPrice_CartProd(cartId, pageable);
        LOGGER.debug("got the result for named query: TotalItemsPrice_CartProd, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query TotalItemsPrice_CartProd")
    @RequestMapping(value = "/queries/TotalItemsPrice_CartProd/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTotalItemsPrice_CartProd(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "cartId", required = false) Integer cartId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: TotalItemsPrice_CartProd");

        return queryService.exportTotalItemsPrice_CartProd(exportType, cartId, pageable);
    }

    @RequestMapping(value = "/queries/TotalItemsPrice_Orders", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "sum of price and quantity of orderd products")
    public Page<TotalItemsPriceOrdersResponse> executeTotalItemsPrice_Orders(@RequestParam(value = "Oid", required = false) Integer oid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: TotalItemsPrice_Orders");
        Page<TotalItemsPriceOrdersResponse> _result = queryService.executeTotalItemsPrice_Orders(oid, pageable);
        LOGGER.debug("got the result for named query: TotalItemsPrice_Orders, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query TotalItemsPrice_Orders")
    @RequestMapping(value = "/queries/TotalItemsPrice_Orders/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTotalItemsPrice_Orders(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Oid", required = false) Integer oid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: TotalItemsPrice_Orders");

        return queryService.exportTotalItemsPrice_Orders(exportType, oid, pageable);
    }

    @RequestMapping(value = "/queries/DeleteCartItems_LoggedUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete cart item of the user after checkout")
    public Integer executeDeleteCartItems_LoggedUser(@RequestParam(value = "LoggedUserCartId", required = false) Integer loggedUserCartId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: DeleteCartItems_LoggedUser");
        Integer _result = queryService.executeDeleteCartItems_LoggedUser(loggedUserCartId);
        LOGGER.debug("got the result for named query: DeleteCartItems_LoggedUser, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/Get_CartIdByUserid", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Cart id by logged in user id")
    public Page<GetCartIdByUseridResponse> executeGet_CartIdByUserid(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Get_CartIdByUserid");
        Page<GetCartIdByUseridResponse> _result = queryService.executeGet_CartIdByUserid(pageable);
        LOGGER.debug("got the result for named query: Get_CartIdByUserid, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query Get_CartIdByUserid")
    @RequestMapping(value = "/queries/Get_CartIdByUserid/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_CartIdByUserid(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: Get_CartIdByUserid");

        return queryService.exportGet_CartIdByUserid(exportType, pageable);
    }

    @RequestMapping(value = "/queries/MyCart_Items_Count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Count items in the user cart")
    public Page<MyCartItemsCountResponse> executeMyCart_Items_Count(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: MyCart_Items_Count");
        Page<MyCartItemsCountResponse> _result = queryService.executeMyCart_Items_Count(pageable);
        LOGGER.debug("got the result for named query: MyCart_Items_Count, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query MyCart_Items_Count")
    @RequestMapping(value = "/queries/MyCart_Items_Count/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMyCart_Items_Count(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: MyCart_Items_Count");

        return queryService.exportMyCart_Items_Count(exportType, pageable);
    }

    @RequestMapping(value = "/queries/QV_getInventoryDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get product inventory details for given product id")
    public Page<QvGetInventoryDetailsResponse> executeQV_getInventoryDetails(@RequestParam(value = "productIds") List<Integer> productIds, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QV_getInventoryDetails");
        Page<QvGetInventoryDetailsResponse> _result = queryService.executeQV_getInventoryDetails(productIds, pageable);
        LOGGER.debug("got the result for named query: QV_getInventoryDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query QV_getInventoryDetails")
    @RequestMapping(value = "/queries/QV_getInventoryDetails/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportQV_getInventoryDetails(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "productIds") List<Integer> productIds, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: QV_getInventoryDetails");

        return queryService.exportQV_getInventoryDetails(exportType, productIds, pageable);
    }

    @RequestMapping(value = "/queries/Get_CartItems_id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get cart items by cart id. This is used to insert the updated values into the orders")
    public Page<GetCartItemsIdResponse> executeGet_CartItems_id(@RequestParam(value = "Cid", required = false) Integer cid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Get_CartItems_id");
        Page<GetCartItemsIdResponse> _result = queryService.executeGet_CartItems_id(cid, pageable);
        LOGGER.debug("got the result for named query: Get_CartItems_id, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query Get_CartItems_id")
    @RequestMapping(value = "/queries/Get_CartItems_id/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGet_CartItems_id(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Cid", required = false) Integer cid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: Get_CartItems_id");

        return queryService.exportGet_CartItems_id(exportType, cid, pageable);
    }

    @RequestMapping(value = "/queries/QV_UpdateQuantityFromPI", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update quantity when the order is placed.")
    public IntegerWrapper executeQV_UpdateQuantityFromPI(@Valid @RequestBody QvUpdateQuantityFromPiRequest qvUpdateQuantityFromPiRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QV_UpdateQuantityFromPI");
        Integer _result = queryService.executeQV_UpdateQuantityFromPI(qvUpdateQuantityFromPiRequest);
        LOGGER.debug("got the result for named query: QV_UpdateQuantityFromPI, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}


